#!/bin/bash

# This script is for upgrading your Gentoo kernel
# Kernel source code will be compiled on RAM instead of hard disk
# It will use the old kernel config to compile the new kernel

# This script can be executed by running these following
# commands (internet access required):
#   curl -Ls git.io/upker > upker
#   chmod +x upker
#   sudo ./upker

# You can pass kernel config file into this script:
#   sudo ./upker -c /path/to/config/file

error() { echo -e "$1" && exit; }

exe() {
    eval "$@" || { local rc=$?; echo "run failed on cmd: $@" >&2; exit $rc; }
}

usage() {
    echo "Usage: upker <option> <argument>
                    [-c | --config <config file path>]
                    [-j | --jobs <number of jobs>]
                    [-r | --remove]
                    [-h | --help]"
    exit
}

remove_kernel() {
    eselect kernel list
    echo -n "Choose kernel to remove: "
    read KERNEL_TARGET
    KERNEL_VER="`eselect kernel list | sed -n $((KERNEL_TARGET+1))p |
        cut -d'-' -f2`"

    [ ${KERNEL_VER} == $(uname -r | cut -d'-' -f1) ] &&
        error "Cannot remove current kernel!"

    echo "====="
    ls -d /boot/*-${KERNEL_VER}-gentoo \
        /lib/modules/${KERNEL_VER}-gentoo \
        /usr/src/*-${KERNEL_VER}-gentoo \
        ${HOME}/${KERNEL_VER}-gentoo.config
    echo "====="

    echo "The above files and directories will be removed! Continue?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes )
                rm -rf /boot/*-${KERNEL_VER}-gentoo \
                    /lib/modules/${KERNEL_VER}-gentoo \
                    /usr/src/*-${KERNEL_VER}-gentoo \
                    ${HOME}/${KERNEL_VER}-gentoo.config
                echo "Done!"
                exit
                ;;
            No ) exit;;
        esac
    done
}

uname -r | grep "gentoo" > /dev/null ||
    { echo "This script only works on Gentoo linux"; exit; }

[ ${EUID} -ne 0 ] && error "Permission denied!\nRun this script as root."

KERNEL_SRC="/usr/src/linux"
MNT_POINT="/mnt/kernel"

PARSED_ARGUMENTS=$(getopt -a -n $0 -o c:j:rh --long config:,jobs:,remove,help -- "$@")
[ $? -ne 0 ] && usage

while :; do
    case "${1}" in
        -c | --config)
            [ -f ${2} ] && CONF_FILE=${2} || error "${2} does not exist!"
            shift 2 ;;
        -j | --jobs)
            JOBS=${2}
            shift 2 ;;
        -r | --remove)
            remove_kernel ;;
        -h | --help)
            usage ;;
        -- | '')
            shift; break ;;
        *) echo "Unexpected option: ${1} is not a valid option." ; usage ;;
    esac
done

command -v nproc > /dev/null || error "Cannot detect number of CPU cores!
Please specify number of jobs by using -j option."
[ -z ${JOBS} ] && JOBS="`nproc`"

eselect kernel list
echo -n "Choose kernel: "
read KERNEL_TARGET

if ! [ -z ${CONF_FILE} ]; then
    cp -v ${CONF_FILE} "${HOME}/$(uname -r).config"
elif [ -f ${KERNEL_SRC}/.config ]; then
    cp -v ${KERNEL_SRC}/.config "${HOME}/$(uname -r).config"
else
    error "Cannot detect kernel config file!"
fi

exe "eselect kernel set ${KERNEL_TARGET}"
exe "make -C ${KERNEL_SRC} mrproper"

if [ -d ${MNT_POINT} ]; then
    echo "${MNT_POINT} already existed! Do you want to remove it?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes )
                rm -r ${MNT_POINT}
                mkdir -p ${MNT_POINT}
                break;;
            No ) exit;
        esac
    done
else
    mkdir -p ${MNT_POINT}
fi

exe "mount -t tmpfs -o size=1G tmpfs ${MNT_POINT}"
exe "cp ${HOME}/$(uname -r).config ${MNT_POINT}/.config"
exe "make -C ${KERNEL_SRC} O=${MNT_POINT} olddefconfig"
exe "make -C ${KERNEL_SRC} O=${MNT_POINT} -j${JOBS}"
exe "make -C ${KERNEL_SRC} O=${MNT_POINT} modules_install"
exe "make -C ${KERNEL_SRC} O=${MNT_POINT} install"
exe "emerge @module-rebuild"
exe "grub-mkconfig -o /boot/grub/grub.cfg"
exe "cp -v ${MNT_POINT}/.config ${KERNEL_SRC}/.config"
exe "umount -l ${MNT_POINT}"
exe "rm -r ${MNT_POINT}"

exit 0
